# -*- snakemake -*-
import os
from snakemakelib.config import update_sml_config, sml_rules_path, get_sml_config
from snakemakelib.bio.ngs.methylseq.bismark import ref

# Start by including the general bio.ngs snakefile
include: os.path.join(sml_rules_path(), 'bio/ngs', 'settings.rules')

ngs_cfg = get_sml_config('bio.ngs.settings')

config_default = {
    'bio.ngs.methylseq.bismark' : {
        'ref' : ref(),
        'align' : {
            'cmd' : 'bismark',
            'options' : '--bam --phred33-quals',
            'threads' : 8,
            'suffix'  : '.bam',
        },
        'deduplicate' : {
            'cmd' : 'deduplicate_bismark',
            'options' : '-p --bam',
        },
        'methXtract' : {
            'cmd' : 'bismark_methylation_extractor',
            'options' : "--counts -p --no_overlap",
        },
        'report' : {
            'cmd' : 'bismark2report',
            'options' : "",
        },
    },
}

update_sml_config(config_default)

cfg = get_sml_config('bio.ngs.methylseq.bismark')
ngs_cfg = get_sml_config('bio.ngs.settings')

# Prefix: 8_140228_BC3TYRACXX_P923_101
# Input: 8_140207_AC3NVGACXX_P923_101_1_val_1.fq.gz, 8_140207_AC3NVGACXX_P923_101_2_val_2.fq.gz
rule bismark_bowtie2_PE_align:
    """bismark: Run bismark paired-end alignment with bowtie2."""
    params: options = cfg['align']['options'],
            cmd = cfg['align']['cmd'],
            ref = cfg['ref'],
            sfx = cfg['align']['suffix'],
    threads: cfg['align']['threads']
    input: read1="{path}" + os.sep + "{prefix}" + ngs_cfg['read1_label'] + ngs_cfg['read1_suffix'],\
           read2="{path}" + os.sep + "{prefix}" + ngs_cfg['read2_label'] + ngs_cfg['read2_suffix']
    output: alignout="{path}" + os.sep + "{prefix}" + "_bismark_bt2" + cfg['align']['suffix'], report="{path}" + os.sep + "{prefix}" + "_bismark_bt2_PE_report.txt"
    shell: "{params.cmd} {params.options} {params.ref} -1 {input.read1} -2 {input.read2} -o {wildcards.path} -p {threads} -B {wildcards.prefix} --bowtie2"

rule bismark_deduplicate:
    """bismark: Run bismark deduplication."""
    params: options = cfg['deduplicate']['options'],
            cmd = cfg['deduplicate']['cmd'],
    input: "{path}" + os.sep + "{prefix}" + ".bam"
    output: "{path}" + os.sep + "{prefix}.deduplicated.bam", "{path}" + os.sep + "{prefix}.deduplication_report.txt"
    shell: "{params.cmd} {params.options} {input}"
    

rule bismark_methXtract:
    """bismark: Run bismark methylation extractor

    The option '--report' is hardcoded so that a report is *always*
    generated. Also, the option '--gzip' is hardcoded as it makes
    little sense to generate unzipped output.

    """
    params: options = cfg['methXtract']['options'],
            cmd = cfg['methXtract']['cmd']
    input: "{path}" + os.sep + "{prefix}" + ".bam"
    output: "{path}" + os.sep + "CpG_OB_" + "{prefix}" + ".txt.gz", "{path}" + os.sep + "CpG_OT_" + "{prefix}" + ".txt.gz", "{path}" + os.sep + "CHG_OB_" + "{prefix}" + ".txt.gz", "{path}" + os.sep + "CHG_OT_" + "{prefix}" + ".txt.gz", "{path}" + os.sep + "CHH_OB_" + "{prefix}" + ".txt.gz", "{path}" + os.sep + "CHH_OT_" + "{prefix}" + ".txt.gz"
    shell: "{params.cmd} {params.options} {input} -o {wildcards.path} --report --gzip"

rule bismark_report:
    """bismark: Run bismark report. 

    """
    params: options = cfg['report']['options'],
            cmd = cfg['report']['cmd']
    input: "{path}" + os.sep + "{prefix}" + "_PE_report.txt", "{path}" + os.sep + "{prefix}" + "_pe.deduplicated.M-bias.txt", "{path}" + os.sep + "{prefix}" + "_pe.deduplicated.bam_splitting_report.txt", "{path}" + os.sep + "{prefix}" + "_pe.deduplication_report.txt"
    output: "{path}" + os.sep + "{prefix}" + "_PE_report.html"
    shell: "{params.cmd} {params.options} --dir {wildcards.path} --alignment_report {input[0]} --mbias {input[1]} --splitting_report {input[2]} --dedup_report {input[3]}"
