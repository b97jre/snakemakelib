# -*- snakemake -*-
import os
from snakemakelib.config import update_sml_config, sml_rules_path, BaseConfig, get_sml_config
from snakemakelib.bio.ngs.methylseq.bismark import ref

# Start by including the general bio.ngs snakefile
include: os.path.join(sml_rules_path(), 'bio/ngs', 'settings.rules')

ngs_cfg = get_sml_config('bio.ngs.settings')

config_default = BaseConfig({
    'bio.ngs.methylseq.bismark' : BaseConfig({
        'ref' : ref(),
        'align' : BaseConfig({
            'cmd' : 'bismark',
            'options' : '--bam --bowtie2 --phred33-quals',
            'threads' : 8,
        }),
        'deduplicate' : BaseConfig({
            'cmd' : 'deduplicate_bismark',
            'options' : '-p --bam',
        }),
        'methXtract' : BaseConfig({
            'cmd' : 'bismark_methylation_extractor',
            'options' : "--bedGraph --counts  --gzip -p --no_overlap --report",
        }),
        'report' : BaseConfig({
            'cmd' : 'bismark2report',
        }),
    }),
})

update_sml_config(config_default)

cfg = get_sml_config('bio.ngs.methylseq.bismark')
ngs_cfg = get_sml_config('bio.ngs.settings')

rule bismark_align:
    """bismark: Run bismark align."""
    params: options = cfg['align']['options'],
            cmd = cfg['align']['cmd'],
            ref = cfg['ref'],
    threads: cfg['align']['threads']
    input: "{path}" + os.sep + "{prefix}" + ngs_cfg['read1_label'] + ngs_cfg['read1_suffix'],\
           "{path}" + os.sep + "{prefix}" + ngs_cfg['read2_label'] + ngs_cfg['read2_suffix']
    output: "{path}" + os.sep + "{prefix}_bismark_bt2_pe.bam"
    shell: "{params.cmd} {params.options} {params.ref} -1 {input[0]} -2 {input[1]} -o {wildcards.path} -p {threads} -B {wildcards.prefix}"

rule bismark_deduplicate:
    """bismark: Run bismark deduplication."""
    params: options = cfg['deduplicate']['options'],
            cmd = cfg['deduplicate']['cmd'],
    input: "{path}" + os.sep + "{prefix}" + ".bam"
    output: "{path}" + os.sep + "{prefix}.deduplicated.bam"
    shell: "{params.cmd} {params.options} {input}"
    

rule bismark_methXtract:
    """bismark: Run bismark methylation extractor"""
    params: options = cfg['methXtract']['options'],
            cmd = cfg['methXtract']['cmd'],
    input: "{path}" + os.sep + "{prefix}" + ".bam"
    output: "{path}" + os.sep + "{prefix}.bedGraph", "{path}" + os.sep + "{prefix}.cov"
    shell: "{params.cmd} {params.options} {input} -o {wildcards.path}"

# input: 8_140207_AC3NVGACXX_P923_101_1_val_1.fq.gz_bismark_bt2_pe.deduplicated.bedGraph
# output: 8_140207_AC3NVGACXX_P923_101_1_val_1.fq.gz_bismark_bt2_pe.deduplicated.M-bias.txt
# rule bismark_report:
#     """bismark: Run bismark report. 

#     This rule currently *requires* that methylation extraction has
#     been run as the input depends on the bedGraph output from
#     bismark_methXtract.
#     """
#     params: options = cfg['report']['options'],
#             cmd = cfg['report']['cmd']
#     input: "{path}" + os.sep + "{prefix}" + ".bedGraph"
#     output: "{path}" + os.sep + "{prefix}.M-bias.txt"
#     shell: "{params.cmd} {params.options} --mbias {input}"

