# -*- snakemake -*-
import os
import glob
from snakemakelib.config import update_sml_config, sml_rules_path, get_sml_config, sml_path

# Start by including the general snakefile
include: os.path.join(sml_rules_path(), 'bio/ngs', 'settings.rules')
# Include comp settings to gain access to awk and friends
include: os.path.join(sml_rules_path(), 'comp', 'settings.rules')


# Jar program names
BUILD_BAM_INDEX = "BuildBamIndex"
SORT_SAM = "SortSam"
MERGE_SAM_FILES = "MergeSamFiles"
REORDER_SAM = "ReorderSam"
MARK_DUPLICATES = "MarkDuplicates"
CREATE_SEQUENCE_DICTIONARY = "CreateSequenceDictionary"
COLLECT_INSERT_SIZE_METRICS = "CollectInsertSizeMetrics"
COLLECT_ALIGNMENT_SUMMARY_METRICS = "CollectAlignmentSummaryMetrics"
CALCULATE_HS_METRICS = "CalculateHsMetrics"
ADD_OR_REPLACE_READ_GROUPS = "AddOrReplaceReadGroups"

ngs_cfg = get_sml_config('bio.ngs.settings')

config_default = { 
    'bio.ngs.qc.picard' : {
        # 'insertmetrics_targets' : "$(subst .bam,.insert_metrics,$(wildcard $(inputdir)/*/*recal.bam))",
        #'alignmetrics_targets' : "$(subst .bam,.align_metrics,$(wildcard $(inputdir)/*/*recal.bam))",
        #'dupmetrics_targets' : "$(subst .bam,.dup_metrics,$(wildcard $(inputdir)/*/*recal.bam))",
        #'hsmetrics_targets' : "$(subst .bam,.hs_metrics,$(wildcard $(inputdir)/*/*recal.bam))",
        'add_or_replace_read_groups_options' : "sort_order=coordinate create_index=true",
        'alignmetrics_targets' : [],
        'bait_regions' : ngs_cfg['sequence_capture']['bait_regions'],
        'common_options' : "VALIDATION_STRINGENCY=SILENT",
        'dupmetrics_targets' : [],
        'home' : ".",
        'hsmetrics_targets' : [],
        'insertmetrics_targets' : [],
        'java_mem' : ngs_cfg['java']['java_mem'],
        'java_tmpdir' : ngs_cfg['java']['java_tmpdir'],
        'plotmetrics' : os.path.join(sml_path(), "scripts", "plotMetrics.R"),
        'ref' : ngs_cfg['db']['ref'],
        'sort_sam_options' : "SORT_ORDER=coordinate",
        'target_regions' : ngs_cfg['sequence_capture']['target_regions'],
        'merge_sam' : {
            'suffix' : '.sort.bam', # source suffixes
            'label' : "sort.merge", # target label
            'options' : "CREATE_INDEX=true",
            'output' : [],
            'input' : [],
        },
    },
}

update_sml_config(config_default)

picard_config = get_sml_config('bio.ngs.qc.picard')

config_default['bio.ngs.qc.picard']['options'] = picard_config['common_options'] 

config_default['bio.ngs.qc.picard']['cmd'] = " ".join(["java -Xmx" + picard_config['java_mem'],
                                                       "-Djava.io.tmpdir=" + picard_config['java_tmpdir'], 
                                                       "-jar", os.path.join(picard_config['home'], "picard.jar ")])

update_sml_config(config_default)

# Use picard config to increase readibility
sml_config = get_sml_config()
picard_config = get_sml_config('bio.ngs.qc.picard')

rule picard_build_bam_index:
    """Picard: build bam index from bam file"""
    params: cmd = picard_config['cmd'] +  BUILD_BAM_INDEX,
            options = picard_config['options']
    input: "{prefix}.bam"
    output: "{prefix}.bai"
    shell: "{params.cmd} I={input} O={output} {params.options}"

rule picard_sort_bam:
    """Picard: sort bam file"""
    params: cmd = picard_config['cmd'] + SORT_SAM,
            options = picard_config['options'],
            sortsam_options = picard_config['sort_sam_options']
    input: "{prefix}.bam"
    output: "{prefix}.sort.bam"
    shell: "{params.cmd} I={input} O={output} {params.options} {params.sortsam_options}"

rule picard_reorder_bam:
    """Picard: reorder bam file"""
    params: cmd = picard_config['cmd'] + REORDER_SAM,
            options = picard_config['options']
    input: "{prefix}.bam", picard_config['ref']
    output: "{prefix}.resorted.bam"
    shell: "{params.cmd} I={input[0]} R={input[1]} O={output} {params.options}"

rule picard_mark_duplicates:
    """Picard: mark duplicates"""
    params: cmd = picard_config['cmd'] + MARK_DUPLICATES,
            options = picard_config['options']
    input: "{prefix}.bam", "{prefix}.bai"
    output: "{prefix}.dup.bam"
    shell: "{params.cmd} I={input[0]} O={output} {params.options} M={wildcards.prefix}.dup_metrics"

ruleorder: picard_mark_duplicates > picard_build_bam_index

# rule picard_create_sequence_dictionary:
#     params: cmd = picard_config['cmd'] + CREATE_SEQUENCE_DICTIONARY,
#             options = picard_config['options']
#     input: picard_config['ref']
#     output: "{prefix}.interval_list"
#     shell: "{params.cmd} R={input} O={output}"

rule picard_create_interval_list_awk:
    """Picard: create interval list using awk"""
    params: cmd = picard_config['cmd'] + CREATE_SEQUENCE_DICTIONARY,
            options = picard_config['options']
    input: "{prefix}.bed", picard_config['ref'].replace(".fa", ".interval_list")
    output: "{prefix}.interval_list"
    shell: sml_config['comp.settings']['awk'] + " '{{printf(\"%s\\t%s\\t%s\\t%s\\t%s\\n\", $$1,$$2,$$3,\"+\",$$4)}}' $< >> {output}"

rule picard_collect_insert_size_metrics:
    """Picard: collect insertion size metrics"""
    params: cmd = picard_config['cmd'] + COLLECT_INSERT_SIZE_METRICS,
            options = picard_config['options']
    input: "{prefix}.bam", "{prefix}.bai"
    output: "{prefix}.insert_metrics"
    shell: "{params.cmd} {params.options} H={wildcards.prefix}.hist I={input[0]} O={output} R={input[1]}"

rule picard_mark_duplicates_metrics:
    """Picard: mark duplicates metrics. See also picard_mark_duplicates."""
    params: cmd = picard_config['cmd'] + MARK_DUPLICATES,
            options = picard_config['options']
    input: "{prefix}.bam", "{prefix}.bai"
    output: "{prefix}.dup_metrics"
    shell: "{params.cmd} {params.options} I={input[0]} M={output} O={wildcards.prefix}.dup.bam"

ruleorder: picard_mark_duplicates > picard_mark_duplicates_metrics

rule picard_collect_alignment_summary_metrics:
    """Picard: collect alignment summary metrics"""
    params: cmd = picard_config['cmd'] + COLLECT_ALIGNMENT_SUMMARY_METRICS,
            options = picard_config['options']
    input: "{prefix}.bam", "{prefix}.bai", picard_config['ref']
    output: "{prefix}.align_metrics"
    shell: "{params.cmd} {params.options} I={input} O={output[0]} R={input[2]}"

rule picard_calculate_hs_metrics:
    """Picard: calculate hybrid selection metrics"""
    params: cmd = picard_config['cmd'] + CALCULATE_HS_METRICS,
            options = picard_config['options'],
            target_regions = picard_config['target_regions'],
            bait_regions = picard_config['bait_regions']
    input: "{prefix}.bam", "{prefix}.bai", picard_config['ref']
    output: "{prefix}.hs_metrics"
    shell: "{params.cmd} {params.options} TI={params.target_regions} BI={params.bait_regions} I={input[0]} O={output} R={input[2]}"

rule picard_plot_metrics:
    """Picard: plot metrics using custom R script """
    params: cmd = picard_config['plotmetrics']
    input: "{prefix}_metrics.txt"
    output: "{prefix}_metrics.pdf"
    shell: "{params.cmd} {input} {output} {wildcards.prefix}"

rule picard_add_or_replace_read_groups:
    """Picard: add or replace read groups. Currently tailored for Illumina read groups."""
    params: cmd = picard_config['cmd'] + ADD_OR_REPLACE_READ_GROUPS,
            options = picard_config['options'],
            custom_options = picard_config['add_or_replace_read_groups_options'],
            lib = "lib",
            rgpl = "Illumina",
            # rgpu = input.split(".")[0],
            # rgid = input.split(".")[0],
            # rgsm = input.split(".")[0]
            rgpu = "rgpu",
            rgid = "rgid",
            rgsm = "RGSM"
    input: "{prefix}.bam"
    output: "{prefix}.rg.bam", "{prefix}.rg.bai"
    shell: "{params.cmd} INPUT={input} OUTPUT={output[0]} {params.custom_options} RGID={params.rgid} RGLB={params.lib} RGSM={params.rgsm} RGPL={params.rgpl} RGPU={params.rgpu}"

ruleorder: picard_add_or_replace_read_groups > picard_build_bam_index

# FIXME: this is hacky at the moment but is a proof of principle
def find_merge_inputs(wildcards):
    """Find the input files for picard_merge_sam"""
    subdirs = [d for d in os.listdir(wildcards.path) if os.path.isdir(os.path.join(wildcards.path, d))]
    sources = []
    for d in subdirs:
        # Assume we start from fastq sources; could be more than one barcode, more than one lane
        fqsrc = sorted(glob.glob("{path}{sep}{prefix}*{suffix}".format(path=os.path.join(wildcards.path, d), sep=os.sep, prefix=wildcards.prefix, suffix=sml_config['bio.ngs.settings']['fastq_suffix'])))
        pfx = fqsrc[0].replace(sml_config['bio.ngs.settings']['fastq_suffix'], "").replace(sml_config['bio.ngs.settings']['read1_label'], "")
        src = "{prefix}{suffix}".format(prefix=pfx, suffix=picard_config['merge_sam']['suffix'])
        sources.append(src)
    return sources

rule picard_merge_sam:
    """Picard: merge sam files"""
    params: cmd = picard_config['cmd'] + MERGE_SAM_FILES,
            options = " ".join([picard_config['options'],
                                picard_config['merge_sam']['options']])
    input: find_merge_inputs
    output: "{path}" + os.sep + "{prefix}." + picard_config['merge_sam']['label'] + ".bam"
    run: 
      inputstr = " ".join(["INPUT={}".format(x) for x in input])
      shell("{cmd} {ips} OUTPUT={out} {opt}".format(cmd=params.cmd, ips=inputstr, out=output, opt=params.options))
