# -*- snakemake -*-
import os
from collections import namedtuple
from snakemakelib.config import update_sml_config, sml_rules_path, get_sml_config
from snakemakelib.report.sphinx import sphinx_sample_metrics_report
from snakemakelib.utils import utc_time
from snakemakelib.report.picard import PicardMetricsCollection, PicardMetrics, AlignMetrics, InsertMetrics, AlignMetricsCollection, HsMetrics, DuplicationMetrics

# Start by including the general snakefile
include: os.path.join(sml_rules_path(), 'bio/ngs', 'settings.rules')
            
def find_sample_metrics(wildcards):
    """Simple sample metrics finding function"""
    metrics = []
    for root, dirs, files in os.walk(workflow._workdir):
        metrics += [os.path.join(root, x) for x in files if x.endswith('metrics')]
    return metrics

config_default = { 
    'bio.ngs.report' : {
        'project_id' : "",
        'project_name' : "",
        'basedir' : os.curdir,
        'application':"",
        'date':utc_time(),
        'docroot' : 'sphinx_report',
        'picard' : {
            'columns' : [],
            'extensions' : ['.align_metrics', '.dup_metrics', '.hs_metrics', '.insert_metrics'],
            'inputfun' : find_sample_metrics,
        },
    },
}

update_sml_config(config_default)

cfg = get_sml_config()




rule sphinx_sample_metrics_report:
    """sphinx: Collect metrics for samples and generate a simple metrics report"""
    input: ["{path}{sep}{sample}".format(path=cfg['bio.ngs.report']['basedir'], sep=os.sep, sample=x) for x in cfg['bio.ngs.settings']['samples']]
    run:
      sphinx_sample_metrics_report(input, cfg['bio.ngs.report'])

rule sample_metrics_report:
    """report: simple text-based report based on picard metrics"""
    input: cfg['bio.ngs.report']['picard']['inputfun']
    run:
      amc = AlignMetricsCollection([AlignMetrics(pmid=os.path.basename(x).split(".")[0], file=x) for x in input if x.endswith('.align_metrics')])
      dmc = PicardMetricsCollection([DuplicationMetrics(pmid=os.path.basename(x).split(".")[0], file=x) for x in input if x.endswith('.dup_metrics')])
      hsmc = PicardMetricsCollection([HsMetrics(pmid=os.path.basename(x).split(".")[0], file=x) for x in input if x.endswith('.hs_metrics')])
      imc = PicardMetricsCollection([InsertMetrics(pmid=os.path.basename(x).split(".")[0], file=x) for x in input if x.endswith('.insert_metrics')])
      acol = ['ID', 'PCT_PF_READS_ALIGNED']
      amcmetrics = amc.merge(category=['PAIR'], columns=acol)
      hcol = ['PCT_TARGET_BASES_10X', 'PCT_TARGET_BASES_30X', 'ZERO_CVG_TARGETS_PCT']
      hsmetrics = hsmc.merge(columns=hcol)
      print("\t".join(["{:10}".format(a) for a in acol + hcol]))
      for i in range(0,len(amcmetrics)):
          s = "\t".join(["{:10}".format(amcmetrics[i][a]) for a in acol]) + \
              "\t".join(["{:10}".format(hsmetrics[i][h]) for h in hcol])
          print (s)

