# -*- snakemake -*-
#
import os
import re
from snakemakelib.utils import safe_makedir
from snakemakelib.bio.ngs.db import index
from snakemakelib.config import update_sml_config, get_sml_config

include: "../settings.rules"

ngs_cfg = get_sml_config('bio.ngs.settings')

config_default = {
    'bio.ngs.db.ucsc' : { 
        'ref' : ngs_cfg['db']['ref'],
        'index' : index,
        'urldownload' : 'http://hgdownload.cse.ucsc.edu/goldenPath/',
    },
}

update_sml_config(config_default)

ucsc_cfg = get_sml_config('bio.ngs.db.ucsc')

rule ucsc_pseudo:
    """Pseudo rule; eliminates circular rule dependency of autosome.fa -> fa -> autosome.fa"""
    output: ref = ucsc_cfg['ref']

rule ucsc_link:
    """Link reference to ucsc directory"""
    input: ref = ucsc_cfg['ref']
    output: reflink = temp(ucsc_cfg['index', 'ucsc'])
    run:
        safe_makedir(os.path.dirname(output.reflink))
        tgt = os.path.join(os.path.dirname(output.reflink), os.path.basename(input.ref))
        if not os.path.exists(tgt):
            os.symlink(input.ref, tgt)

rule ucsc_write_chromosome:
    """Generate chromosome-specific fasta file from reference."""

    input: ref = ucsc_cfg['ref']
    output: chrfa = os.path.join("{path}", "chr{chr}.fa")
    run:
        from Bio import SeqIO
        seqs = SeqIO.parse(open(input.ref), format='fasta')
        for seq in seqs:
            name = output.chrfa
            if seq.id == wildcards.chr or seq.id == "chr" + wildcards.chr:
                smllogger.info("Generating chromosome file {}".format(name))
                SeqIO.write(seq, open(name, 'w'), format='fasta')
                break

rule ucsc_download_2bit:
    """Download 2bit file from ucsc"""
    params: urlinput = os.path.join(ucsc_cfg['urldownload'], "{build}", "bigZips", "{build}.2bit")
    output: os.path.join("{path}", "{build}", "ucsc", "{build}.2bit")
    shell: "mkdir -p `dirname {output}` && wget {params.urlinput} -O {output}"

rule ucsc_autosome_reference:
    """Make an autosome reference from original build file.

    Assume chromosome names are prefixed chr.
    """
    input: ref = "{prefix}.fa"
    output: ref = "{prefix}.autosome.fa"
    run:
        from Bio import SeqIO
        seqs = SeqIO.parse(open(input.ref), format='fasta')
        r = re.compile(r"chr[0-9MTXY]+$")
        with open(output.ref, "w") as fh:
            for seq in seqs:
                if r.match(seq.id):
                    smllogger.info("Writing chromosome {}".format(seq.id))
                    SeqIO.write(seq, fh, format='fasta')

ruleorder: ucsc_pseudo > ucsc_link > ucsc_autosome_reference > ucsc_write_chromosome
