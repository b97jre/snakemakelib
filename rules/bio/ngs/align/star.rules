# -*- snakemake -*-
import os
from snakemakelib.config import update_sml_config, get_sml_config
from snakemakelib.utils import is_compressed
from snakemakelib.bio.ngs.db import index

include: '../../../comp/settings.rules'
include: '../settings.rules'
include: '../tools/samtools.rules'

ngs_conf = get_sml_config('bio.ngs.settings')

config_default = { 
    'bio.ngs.align.star' : {
        'cmd' : "STAR",
        'ref' : ngs_conf['db']['ref'],
        'index' : index,
        'star_index' : {
            'threads' : ngs_conf['threads'],
            'options' : "--genomeSAindexNbases 14",
            'sjdbGTFfile' : ngs_conf['annotation']['transcript_annot_gtf'],
            'sjdbOverhang' : 100,
            'genome' : "Genome",
            'SAname' : "SA",
        },
        'align' : {
            'threads' : ngs_conf['threads'],
            'options' : "",
            'outSAMtype' : "Unsorted",
        },
    },
}

update_sml_config(config_default)

star_cfg = get_sml_config('bio.ngs.align.star')
ngs_cfg = get_sml_config('bio.ngs.settings')
comp_cfg = get_sml_config('comp.settings')

rule star_index:
    """Generate STAR genome index. By default will generate index in a
    directory '../star' relative to the directory of the reference
    sequence.

    Remember: for small genomes the parameter --genomeSAindexNbases
    must be adjusted; it is calculated as min(14, log2(GenomeLength)/2 - 1)

    """
    params: cmd = star_cfg['cmd'],
            options = " ".join([\
                                star_cfg['star_index']['options'],\
                                "--sjdbGTFfile {}".format(star_cfg['star_index']['sjdbGTFfile']) if star_cfg['star_index']['sjdbGTFfile'] else "",\
                                "--sjdbOverhang {}".format(star_cfg['star_index']['sjdbOverhang']) if star_cfg['star_index']['sjdbGTFfile'] else ""\
                                ]),
            genomedir = os.path.dirname(star_cfg['index', 'star'])
    input: ref = star_cfg['ref']
    output: Genome = os.path.join(os.path.dirname(star_cfg['index', "star"]), "Genome"), SA=os.path.join(os.path.dirname(star_cfg['index', "star"]), "SA")
    threads: star_cfg['star_index']['threads']
    shell: "{params.cmd} --runThreadN {threads} --runMode genomeGenerate --genomeDir {params.genomedir} --genomeFastaFiles {input.ref} {params.options}"

rule star_align:
    """Run STAR alignment"""
    params: cmd = star_cfg['cmd'],
            genomedir = os.path.dirname(star_cfg['index', 'star']),
            options = " ".join([\
            star_cfg['align']['options'],\
                                "--readFilesCommand {cmd}".format(cmd=comp_cfg['compression']['prog_map'][os.path.splitext(ngs_cfg['fastq_suffix'])[1]]) if is_compressed(ngs_cfg['fastq_suffix']) else "",
                                "--outSAMtype BAM {}".format(star_cfg['align']['outSAMtype']),
                            ])
    input: read1="{prefix}" + ngs_cfg['read1_label'] + ngs_cfg['fastq_suffix'],\ 
           read2="{prefix}" + ngs_cfg['read2_label'] + ngs_cfg['fastq_suffix'],\
           index=star_cfg['index', 'star']
    output: (["{prefix}.Aligned.out.bam"] if star_cfg['align']['outSAMtype'].find("Unsorted") > -1 else []) + (["{prefix}.Aligned.sortedByCoord.out.bam"] if star_cfg['align']['outSAMtype'].find("SortedByCoordinate") > -1 else [])
    threads: star_cfg['align']['threads']
    shell: "{params.cmd} --runThreadN {threads} --genomeDir {params.genomedir} --readFilesIn {input.read1} {input.read2} {params.options} --outFileNamePrefix {wildcards.prefix}."
