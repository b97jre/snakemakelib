# -*- snakemake -*-
import os
from snakemakelib.utils import update_config, sml_rules_path
import snakemakelib.variables as VAR

# Start by including the general snakefile
include: os.path.join(sml_rules_path(), 'bio/ngs', 'settings.rules')

# FIXME: update_config is run *three* separate times due to the fact
# that many rules depend on defaults in the same section. Could this
# be done more economically?
config_default = { 
    VAR.BIO_NGS_TOOLS_GATK : {
        VAR.HOME : ".",
        VAR.BAM_LIST : "",
        VAR.VCFSUFFIX : ".vcf",
        VAR.DBSNP : config[VAR.BIO_NGS_SETTINGS][VAR.DB][VAR.DBSNP],
        VAR.JAVA_MEM : config[VAR.BIO_NGS_SETTINGS][VAR.JAVA][VAR.JAVA_MEM],
        VAR.JAVA_TMPDIR : config[VAR.BIO_NGS_SETTINGS][VAR.JAVA][VAR.JAVA_TMPDIR],
        VAR.REF : config[VAR.BIO_NGS_SETTINGS][VAR.DB][VAR.REF],

        VAR.TARGET_REGIONS : config[VAR.BIO_NGS_SETTINGS][VAR.SEQUENCE_CAPTURE][VAR.TARGET_REGIONS],
        VAR.BAIT_REGIONS : config[VAR.BIO_NGS_SETTINGS][VAR.SEQUENCE_CAPTURE][VAR.BAIT_REGIONS],
        VAR.THREADS : config[VAR.BIO_NGS_SETTINGS][VAR.THREADS],
    },
}

config = update_config(config, config_default)

# Set these rules after updating config as they depend on internal values and then redo update config 
config_default[VAR.BIO_NGS_TOOLS_GATK][VAR.JAR] = os.path.join(config[VAR.BIO_NGS_TOOLS_GATK][VAR.HOME], VAR.GATK_JAR_PROGRAM)
config_default[VAR.BIO_NGS_TOOLS_GATK][VAR.KNOWN_SITES] = config[VAR.BIO_NGS_TOOLS_GATK][VAR.DBSNP]

config_default[VAR.BIO_NGS_TOOLS_GATK][VAR.VARIANT_FILTRATION] = {
    VAR.CMD : VAR.VARIANT_FILTRATION,
    VAR.REF : config[VAR.BIO_NGS_TOOLS_GATK][VAR.REF],
    VAR.OPTIONS : "",
}
config_default[VAR.BIO_NGS_TOOLS_GATK][VAR.READ_BACKED_PHASING] = {
    VAR.CMD : VAR.READ_BACKED_PHASING,
    VAR.REF : config[VAR.BIO_NGS_TOOLS_GATK][VAR.REF],
    VAR.OPTIONS : "",
}
config_default[VAR.BIO_NGS_TOOLS_GATK][VAR.CLIP_READS] = {
    VAR.CMD : VAR.CLIP_READS,
    VAR.OPTIONS : "",
}
config_default[VAR.BIO_NGS_TOOLS_GATK][VAR.VARIANT_EVAL] = {
    VAR.CMD : VAR.VARIANT_EVAL,
    VAR.REF : config[VAR.BIO_NGS_TOOLS_GATK][VAR.REF],
    VAR.OPTIONS : "-ST Filter -l INFO --doNotUseAllStandardModules --evalModule CompOverlap --evalModule CountVariants --evalModule GenotypeConcordance --evalModule TiTvVariantEvaluator --evalModule ValidationReport --stratificationModule Filter",
}
config_default[VAR.BIO_NGS_TOOLS_GATK][VAR.SELECT_SNP_VARIANTS] = {
    VAR.CMD : VAR.SELECT_SNP_VARIANTS,
    VAR.REF : config[VAR.BIO_NGS_TOOLS_GATK][VAR.REF],
    VAR.OPTIONS : "--selectTypeToInclude SNP",
}

config_default[VAR.BIO_NGS_TOOLS_GATK][VAR.INDEL_REALIGNER] = {
    VAR.CMD : VAR.INDEL_REALIGNER,
    VAR.REF : config[VAR.BIO_NGS_TOOLS_GATK][VAR.REF],
    VAR.OPTIONS : " ".join(["-L {target}".format(target=config.get(VAR.BIO_NGS_TOOLS_GATK).get(VAR.TARGET_REGIONS)) if config.get(VAR.BIO_NGS_TOOLS_GATK).get(VAR.TARGET_REGIONS)  else ""])
}
config_default[VAR.BIO_NGS_TOOLS_GATK][VAR.PRINT_READS] = {
    VAR.CMD : VAR.PRINT_READS,
    VAR.REF : config[VAR.BIO_NGS_TOOLS_GATK][VAR.REF],
    VAR.OPTIONS : ""
}

config_default[VAR.BIO_NGS_TOOLS_GATK][VAR.REALIGNER_TARGET_CREATOR] = {
    VAR.CMD : VAR.REALIGNER_TARGET_CREATOR,
    VAR.REF : config[VAR.BIO_NGS_TOOLS_GATK][VAR.REF],
    VAR.OPTIONS : "",
}

config_default[VAR.BIO_NGS_TOOLS_GATK][VAR.UNIFIED_GENOTYPER] = {
    VAR.CMD : VAR.UNIFIED_GENOTYPER,
    VAR.REF : config[VAR.BIO_NGS_TOOLS_GATK][VAR.REF],
    VAR.OPTIONS : " ".join(["-stand_call_conf 30.0 -stand_emit_conf 10.0  --downsample_to_coverage 30 --output_mode EMIT_VARIANTS_ONLY -glm BOTH",
                        "--dbsnp {dbsnp}".format(dbsnp=config.get(VAR.BIO_NGS_TOOLS_GATK).get(VAR.DBSNP)) if config.get(VAR.BIO_NGS_TOOLS_GATK).get(VAR.DBSNP) else "",
                        "-L {target}".format(target=config.get(VAR.BIO_NGS_TOOLS_GATK).get(VAR.TARGET_REGIONS)) if config.get(VAR.BIO_NGS_TOOLS_GATK).get(VAR.TARGET_REGIONS) else ""])
}

config = update_config(config, config_default)

# And yes, we need to do it yet again due to dependency on config[VAR.BIO_NGS_TOOLS_GATK][VAR.JAR]
config_default[VAR.BIO_NGS_TOOLS_GATK][VAR.CMD] = "java -Xmx" + config[VAR.BIO_NGS_TOOLS_GATK][VAR.JAVA_MEM] + " -Djava.io.tmpdir=" + config[VAR.BIO_NGS_TOOLS_GATK][VAR.JAVA_TMPDIR] +  " -jar " + config[VAR.BIO_NGS_TOOLS_GATK][VAR.JAR]

config_default[VAR.BIO_NGS_TOOLS_GATK][VAR.BASE_RECALIBRATOR] = {
    VAR.CMD : VAR.BASE_RECALIBRATOR,
    VAR.REF : config[VAR.BIO_NGS_TOOLS_GATK][VAR.REF],
    VAR.OPTIONS : " ".join([
        "-L {target}".format(target=config.get(VAR.BIO_NGS_TOOLS_GATK).get(VAR.TARGET_REGIONS)) if config.get(VAR.BIO_NGS_TOOLS_GATK).get(VAR.TARGET_REGIONS)  else "",
        "-knownSites {known}".format(known=config.get(VAR.BIO_NGS_TOOLS_GATK).get(VAR.KNOWN_SITES)) if config.get(VAR.BIO_NGS_TOOLS_GATK).get(VAR.KNOWN_SITES) else ""])
}

config = update_config(config, config_default)

# Use gatk config to increase readability
gatk_config = config[VAR.BIO_NGS_TOOLS_GATK]

##################################################
# Rules
##################################################
rule gatk_unified_genotyper:
    """Run GATK UnifiedGenotyper"""
    params: cmd = gatk_config[VAR.JAR] + " -T " + gatk_config[VAR.UNIFIED_GENOTYPER][VAR.CMD],
            options = " ".join(["-R", gatk_config[VAR.UNIFIED_GENOTYPER][VAR.REF], 
            gatk_config[VAR.UNIFIED_GENOTYPER][VAR.OPTIONS]])
    input: "{prefix}.bam"
    output: "{prefix}.vcf"
    shell: "{params.cmd} {params.options} -I {input} -o {output}"

rule gatk_realigner_target_creator:
    """Run GATK RealignerTargetCreator"""
    params: cmd = gatk_config[VAR.JAR] + " -T " + gatk_config[VAR.REALIGNER_TARGET_CREATOR][VAR.CMD],
            options = " ".join(["-R", gatk_config[VAR.REALIGNER_TARGET_CREATOR][VAR.REF],
            gatk_config[VAR.REALIGNER_TARGET_CREATOR][VAR.OPTIONS]])
    input: "{prefix}.bam"
    output: "{prefix}.intervals"
    shell: "{params.cmd} {params.options} -I {input} -o {output}"

rule gatk_indel_realigner:
    """Run GATK IndelRealigner"""
    params: cmd = gatk_config[VAR.JAR] + " -T " + gatk_config[VAR.INDEL_REALIGNER][VAR.CMD],
            options = " ".join(["-R", gatk_config[VAR.INDEL_REALIGNER][VAR.REF],
            gatk_config[VAR.INDEL_REALIGNER][VAR.OPTIONS]])
    input: "{prefix}.bam", "{prefix}.intervals"
    output: "{prefix}.realign.bam"
    shell: "{params.cmd} {params.options} -o {output} --targetIntervals {input[1]}"

rule gatk_base_recalibrator:
    """Run GATK BaseRecalibrator"""
    params: cmd = gatk_config[VAR.JAR] + " -T " + gatk_config[VAR.BASE_RECALIBRATOR][VAR.CMD],
            options = gatk_config[VAR.BASE_RECALIBRATOR][VAR.OPTIONS]
    input: "{prefix}.bam", "{prefix}.bai"
    output: "{prefix}.recal_data.grp"
    shell: "{params.cmd} {params.options} -I {input[0]} -o {output}"

rule gatk_print_reads:
    """Run GATK PrintReads"""
    params: cmd = gatk_config[VAR.JAR] + " -T " + gatk_config[VAR.PRINT_READS][VAR.CMD],
            options = " ".join(["-R", gatk_config[VAR.PRINT_READS][VAR.REF],
            gatk_config[VAR.PRINT_READS][VAR.OPTIONS]])
    input: "{prefix}.bam", "{prefix}.recal_data.grp"
    output: "{prefix}.recal.bam"
    shell: "{params.cmd} {params.options} -I {input[0]} -BQSR {input[1]} -o {output}"

rule gatk_clip_reads:
    """Run GATK ClipReads"""
    params: cmd = gatk_config[VAR.JAR] + " -T " + gatk_config[VAR.CLIP_READS][VAR.CMD],
            options = " ".join([gatk_config[VAR.CLIP_READS][VAR.OPTIONS]])
    input: "{prefix}.bam", "{prefix}.bai"
    output: "{prefix}.clip.bam"
    shell: "{params.cmd} {params.options} -I {input} -o {output}"

rule gatk_variant_filtration:
    """Run GATK VariantFiltration"""
    params: cmd = gatk_config[VAR.JAR] + " -T " + gatk_config[VAR.VARIANT_FILTRATION][VAR.CMD],
            options = " ".join(["-R", gatk_config[VAR.VARIANT_FILTRATION][VAR.REF],
            gatk_config[VAR.VARIANT_FILTRATION][VAR.OPTIONS]])
    input: "{prefix}.vcf"
    output: "{prefix}.filtered.vcf"
    shell: "{params.cmd} {params.options} --variant {input} --out {output}"

rule gatk_variant_eval:
    """Run GATK VariantEval"""
    params: cmd = gatk_config[VAR.JAR] + " -T " + gatk_config[VAR.VARIANT_EVAL][VAR.CMD],
            options = " ".join(["-R", gatk_config[VAR.VARIANT_EVAL][VAR.REF],
            gatk_config[VAR.VARIANT_EVAL][VAR.OPTIONS]])
    input: "{prefix}.vcf"
    output: "{prefix}.eval_metrics"
    shell: "{params.cmd} {params.options} --eval {input} -o {output}"

rule gatk_read_backed_phasing:
    """Run GATK ReadBackedPhasing"""
    params: cmd = gatk_config[VAR.JAR] + " -T " + gatk_config[VAR.READ_BACKED_PHASING][VAR.CMD],
            options = " ".join(["-R", gatk_config[VAR.READ_BACKED_PHASING][VAR.REF],
                                gatk_config[VAR.READ_BACKED_PHASING][VAR.OPTIONS],
                                "--variant {prefix}" + gatk_config[VAR.VCFSUFFIX]])
    input: "{prefix}.bam", "{prefix}.bai"
    output: "{prefix}.phased.vcf"
    shell: "{params.cmd} {params.options} -I {input} -o {output}"

rule gatk_select_snp_variants:
    """Run GATK SelectVariants to select SNPs"""
    params: cmd = gatk_config[VAR.JAR] + " -T " + gatk_config[VAR.SELECT_SNP_VARIANTS][VAR.CMD],
            options = " ".join(["-R", gatk_config[VAR.SELECT_SNP_VARIANTS][VAR.REF],
                                gatk_config[VAR.SELECT_SNP_VARIANTS][VAR.OPTIONS]])
    input: "{prefix}.vcf"
    output: "{prefix}.snp.vcf"
    shell: "{params.cmd} {params.options} --variant {input} --out {output}"
