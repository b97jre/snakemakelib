# -*- snakemake -*-
import os
import glob
import math
from mako.template import Template
from snakemake.utils import report
from snakemakelib.config import update_sml_config, sml_rules_path, get_sml_config
from snakemakelib.report.picard import qc_plots

# Templates
picard_qc_report = Template(filename=os.path.join(sml_rules_path(), 'bio/ngs/reports', 'picard_qc_report.mako'))

# Start by including the general snakefile
include: os.path.join(sml_rules_path(), 'bio/ngs', 'settings.rules')
include: os.path.join(sml_rules_path(), 'bio/ngs/reports', 'settings.rules')
include: os.path.join(sml_rules_path(), 'bio/ngs/qc', 'picard.rules')

def find_sample_metrics(wildcards):
    """Simple sample metrics finding function"""
    cfg = get_sml_config()
    extensions = [picard_report_cfg['alnmetrics'], 
                  picard_report_cfg['dupmetrics'], 
                  picard_report_cfg['hsmetrics'], 
                  picard_report_cfg['insmetrics']]
    metrics = []
    if cfg['bio.ngs.settings']['samples']:
        for s in cfg['bio.ngs.settings']['samples']:
            metrics += [os.path.join(workflow._workdir, s, "".join([s, ".", wildcards.label, ext])) for ext in extensions]
    return metrics

config_default = { 
    'bio.ngs.reports.picard_qc_report' : {
        'columns' : ["ZERO_CVG_TARGETS_PCT", "PCT_TARGET_BASES_2X", "PCT_TARGET_BASES_10X", "PCT_TARGET_BASES_20X", "PCT_TARGET_BASES_30X", "PCT_TARGET_BASES_40X", "PCT_TARGET_BASES_50X", "PCT_TARGET_BASES_100X"],
        'hticks' : ["0X", "2X", "10X", "20X", "30X", "40X", "50X", "100X"],
        'alnmetrics' : '.align_metrics',
        'dupmetrics' : '.dup_metrics',
        'hsmetrics' : '.hs_metrics',
        'insmetrics' : '.insert_metrics',
        'inputfun' : find_sample_metrics,
        'summarycolumns' : ["SAMPLE", "TOTAL_READS", "PCT_PF_READS_ALIGNED", "PERCENT_DUPLICATION", "MEAN_INSERT_SIZE", "MEAN_TARGET_COVERAGE", "PCT_ON_TARGET", "PCT_TARGET_BASES_10X", "PCT_TARGET_BASES_30X"],
        'summarycolumn_names' : ['sample', 'total', '%aligned', '%dup', 'insert', 'meancov', '%ontarget', '10X', '30X'],
    },
}

update_sml_config(config_default)

cfg = get_sml_config()
report_cfg = get_sml_config('bio.ngs.reports.settings')
picard_report_cfg = get_sml_config('bio.ngs.reports.picard_qc_report')

rule picard_qc_report:
    """Generate picard qc report"""
    input: picard_report_cfg['inputfun']
    output: seqstats = os.path.join(report_cfg['graphicsdir'], '{label}_seqstats.png'),
            alnmet = os.path.join(report_cfg['graphicsdir'], '{label}_alnmet.png'),
            dupmet = os.path.join(report_cfg['graphicsdir'], '{label}_dupmet.png'),
            insmet = os.path.join(report_cfg['graphicsdir'], '{label}_insmet.png'),
            targetmet = os.path.join(report_cfg['graphicsdir'], '{label}_targetmet.png'),
            target2dup = os.path.join(report_cfg['graphicsdir'], '{label}_target2dup.png'),
            hsmet = os.path.join(report_cfg['graphicsdir'], '{label}_hsmet.png'),
            hsmetsub = [os.path.join(report_cfg['graphicsdir'], '{label}_hsmetsub_' + str(x) + '.png') for x in range(0, math.ceil(len(cfg['bio.ngs.settings']['samples'])/9))],
            metricstable = os.path.join(report_cfg['reportdir'], '{label}_picardmetrics.csv'),
            summarytable = os.path.join(report_cfg['reportdir'], '{label}_picardmetricssummary.csv'),
            report = os.path.join(report_cfg['reportdir'], '{label}_picard_qc_report.html')
    run:
      cfg = get_sml_config()
      d = dict(list(cfg['bio.ngs.settings'].items()) + list(report_cfg.items()) + list(picard_report_cfg.items()))
      qc_plots(list(input), d, output)
      kw = {
          'project_name' : report_cfg['project_name'],
          'application' : report_cfg['application']
      }
      reportdir = report_cfg['reportdir'] + os.sep if not report_cfg['reportdir'].endswith(os.sep) else report_cfg['reportdir']
      d = dict(output.items())
      i = 0
      for x in d['hsmetsub']:
          d['hsmetsub_' + str(i)] = x
          i += 1
      kw.update ([(k, str(v).replace(reportdir, '')) for k,v in d.items()])
      kw['hsmetsub'] = kw['hsmetsub'].split(" ")
      s = picard_qc_report.render(**kw)
      del d['hsmetsub']
      del d['report']
      report(s, output.report, **d)

# #rule picard_qc_report_per_gene:
