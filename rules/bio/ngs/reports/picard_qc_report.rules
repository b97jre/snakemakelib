# -*- snakemake -*-
import os
import glob
import math
from mako.template import Template
from snakemakelib.config import update_sml_config, sml_rules_path, get_sml_config
from snakemakelib.report.picard import qc_plots

# Templates
picard_qc_report = Template("""
Project summary
=============================

:Project: ${project_name}
:Application: ${application}

Sample QC summary
------------------

.. csv-table:: Sample QC summary. Columns show sample name, total number of reads, percent aligned reads, percent duplication, mean insert size, mean coverage over target regions, percent sequenced bases that have aligned to target, followed by the percent bases in target regions covered at 10X and 30X
   :class: docutils
   :file: report/picardmetricssummary.csv
   :header-rows: 1

QC Metrics
----------

Sequence statistics
^^^^^^^^^^^^^^^^^^^

.. figure:: ${seqstats}


Alignment metrics
^^^^^^^^^^^^^^^^^

.. figure:: ${alnmet}

Duplication metrics
^^^^^^^^^^^^^^^^^^^^

.. figure:: ${dupmet}

Insert metrics
^^^^^^^^^^^^^^^^^^^^

.. figure:: ${insmet}

Target metrics
^^^^^^^^^^^^^^^^^^^^

.. figure:: ${targetmet}


.. figure:: ${target2dup}


Hybridization metrics
^^^^^^^^^^^^^^^^^^^^^

.. figure:: ${hsmet}


Sample-based hybridization metrics
----------------------------------

% for f in hsmetsub:
.. figure:: ${f}
   :align: center

% endfor


""")

# Start by including the general snakefile
include: os.path.join(sml_rules_path(), 'bio/ngs', 'settings.rules')
include: os.path.join(sml_rules_path(), 'bio/ngs/reports', 'settings.rules')
include: os.path.join(sml_rules_path(), 'bio/ngs/qc', 'picard.rules')

cfg = get_sml_config('bio.ngs.reports.settings')

def find_sample_metrics(wildcards):
    """Simple sample metrics finding function"""
    extensions = [report_cfg['alnmetrics'], 
                  report_cfg['dupmetrics'], 
                  report_cfg['hsmetrics'], 
                  report_cfg['insmetrics']]
    metrics = []
    if cfg['bio.ngs.settings']['samples']:
        for s in cfg['bio.ngs.settings']['samples']:
            metrics += [os.path.join(workflow._workdir, s, "".join([s, report_cfg['bamlabel'], ext])) for ext in extensions]
    return metrics

config_default = { 
    'bio.ngs.reports.picard_qc_report' : {
        'project_id' : cfg['project_id'],
        'project_name' : cfg['project_name'],
        'basedir' : cfg['basedir'],
        'graphicsdir' : cfg['graphicsdir'],
        'reportdir' : cfg['reportdir'],
        'application': cfg['application'],
        'date' : cfg['date'],
        'columns' : ["ZERO_CVG_TARGETS_PCT", "PCT_TARGET_BASES_2X", "PCT_TARGET_BASES_10X", "PCT_TARGET_BASES_20X", "PCT_TARGET_BASES_30X", "PCT_TARGET_BASES_40X", "PCT_TARGET_BASES_50X", "PCT_TARGET_BASES_100X"],
        'hticks' : ["0X", "2X", "10X", "20X", "30X", "40X", "50X", "100X"],
        'bamlabel' : '.sort.merge.rg',
        'alnmetrics' : '.dup.align_metrics',
        'dupmetrics' : '.dup_metrics',
        'hsmetrics' : '.dup.hs_metrics',
        'insmetrics' : '.dup.insert_metrics',
        'inputfun' : find_sample_metrics,
        'summarycolumns' : ["SAMPLE", "TOTAL_READS", "PCT_PF_READS_ALIGNED", "PERCENT_DUPLICATION", "MEAN_INSERT_SIZE", "MEAN_TARGET_COVERAGE", "PCT_ON_TARGET", "PCT_TARGET_BASES_10X", "PCT_TARGET_BASES_30X"],
        'summarycolumn_names' : ['sample', 'total', '%aligned', '%dup', 'insert', 'meancov', '%ontarget', '10X', '30X'],
    },
}

update_sml_config(config_default)

cfg = get_sml_config()

report_cfg = get_sml_config('bio.ngs.reports.picard_qc_report')

rule picard_qc_report:
    """Generate picard qc report"""
    input: report_cfg['inputfun']
    output: seqstats = os.path.join(report_cfg['graphicsdir'], 'seqstats.png'),
            alnmet = os.path.join(report_cfg['graphicsdir'], 'alnmet.png'),
            dupmet = os.path.join(report_cfg['graphicsdir'], 'dupmet.png'),
            insmet = os.path.join(report_cfg['graphicsdir'], 'insmet.png'),
            targetmet = os.path.join(report_cfg['graphicsdir'], 'targetmet.png'),
            target2dup = os.path.join(report_cfg['graphicsdir'], 'target2dup.png'),
            hsmet = os.path.join(report_cfg['graphicsdir'], 'hsmet.png'),
            hsmetsub = [os.path.join(report_cfg['graphicsdir'], 'hsmetsub-' + str(x) + '.png') for x in range(0, math.ceil(len(cfg['bio.ngs.settings']['samples'])/9))],
            metricstable = os.path.join(report_cfg['reportdir'], 'picardmetrics.csv'),
            summarytable = os.path.join(report_cfg['reportdir'], 'picardmetricssummary.csv'),
            report = os.path.join(report_cfg['reportdir'], 'picard_qc_report.html')
    run:
      samples = cfg['bio.ngs.settings']['samples']
      qc_plots(list(input), samples, report_cfg, output)
      kw = {
          'project_name' : report_cfg['project_name'],
          'application' : report_cfg['application']
      }
      reportdir = report_cfg['reportdir'] + os.sep if not report_cfg['reportdir'].endswith(os.sep) else report_cfg['reportdir']
      d = dict(rules.report_generate_qc_plots.output.items())
      i = 0
      for x in d['hsmetsub']:
          d['hsmetsub_' + str(i)] = x
          i += 1
      kw.update ([(k, str(v).replace(reportdir, '')) for k,v in d.items()])
      kw['hsmetsub'] = kw['hsmetsub'].split(" ")
      s = picard_qc_report.render(**kw)
      del d['hsmetsub']
      report(s, str(output.report), **d)
