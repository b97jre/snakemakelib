# -*- snakemake -*-
import os
from snakemakelib.config import update_sml_config, get_sml_config
from snakemakelib.bio.ngs.db import index

include: '../settings.rules'
include: '../tools/samtools.rules'

ngs_cfg = get_sml_config('bio.ngs.settings')

config_default = { 
    "bio.ngs.rnaseq.tuxedo" : {
        'ref' : ngs_cfg['db']['ref'],
        'version2' : True, # Run version 2 by default
        'index' : index,
        'tophat' : {
            'options' : '',
            'threads' : ngs_cfg['threads'],
            'output_dir' : os.path.join(os.curdir, "tophat_out"),
        },
        'cufflinks' : {
            'cmd' : 'cufflinks', 
            'options' : '',
            'transcript_annot_gtf' : ngs_cfg['annotation']['transcript_annot_gtf'],
            'annot_label' : ngs_cfg['db']['build'],
            'output_dir' : os.curdir,
        },
        'bowtie' : {
            'threads' : ngs_cfg['threads'],
            'options' : '',
        },
    },
}

update_sml_config(config_default)

ngs_cfg = get_sml_config('bio.ngs.settings')
tux_cfg = get_sml_config('bio.ngs.rnaseq.tuxedo')
samtools_cfg = get_sml_config('bio.ngs.tools.samtools')
comp_cfg = get_sml_config('comp.settings')

rule tuxedo_bowtie_align:
    """Bowtie paired end alignment"""
    params: cmd = 'bowtie2' if tux_cfg['version2'] else 'bowtie',
            options = tux_cfg['bowtie']['options'],
            index = ("-x " if tux_cfg['version2'] else "") + tux_cfg['index']
    input: read1="{prefix}" + ngs_cfg['read1_label'] + ngs_cfg['fastq_suffix'],\
           read2="{prefix}" + ngs_cfg['read2_label'] + ngs_cfg['fastq_suffix']
    output: "{prefix}.bam"
    threads: tux_cfg['bowtie']['threads']
    shell: "{params.cmd} -p {threads} {params.options} {params.index} -1 {input.read1} -2 {input.read2} | " + samtools_cfg['cmd'] + " view -Sb - > {output}.tmp && mv {output}.tmp {output}"

rule tuxedo_bowtie_build:
    """Bowtie build index"""
    params: ref = tux_cfg['ref'],
            cmd = 'bowtie2-build' if tux_cfg['version2'] else 'bowtie-build'
    input: "{prefix}" + ".fa"
    output: ["{prefix}.1.bt2", "{prefix}.2.bt2", "{prefix}.3.bt2", "{prefix}.4.bt2", "{prefix}.rev.1.bt2", "{prefix}.rev.2.bt2"] if tux_cfg['version2'] else []
    shell: "{params.cmd} {input} {wildcards.prefix}"

rule tuxedo_tophat:
    """Run tophat paired end alignment.

    NB: requires python2 so need to activate a virtual environment or
    the like to run.

    """
    params: cmd = 'tophat2' if tux_cfg['version2'] else 'tophat',
            options = tux_cfg['tophat']['options'],
            index = tux_cfg['index'],
            outdir = tux_cfg['tophat']['output_dir'],
            python2 = comp_cfg['python2']['activate_cmd']
    input: read1 = "{prefix}" + ngs_cfg['read1_label'] + ngs_cfg['fastq_suffix'], 
           read2 = "{prefix}" + ngs_cfg['read2_label'] + ngs_cfg['fastq_suffix']
    output: "{prefix}.tophat2" if tux_cfg['version2'] else "{prefix}.tophat"
    shell: "{params.python2} && {params.cmd} {params.options} -o {output}.tmp {params.index} {input.read1} {input.read2} &> {output}.log && mv {output}.tmp {output} && mv {output}.log {output}"

rule tuxedo_cufflinks_quant:
    """Run cufflinks quantification"""
    params: cmd = tux_cfg['cufflinks']['cmd'],
            options = tux_cfg['cufflinks']['options']
    input: tophat2="{prefix}.tophat2", annot_gtf=tux_cfg['cufflinks']['transcript_annot_gtf']
    output: "{prefix}.cufflinks_quant"
    shell: "{params.cmd} {params.options} --GTF {input.annot_gtf} {input.tophat2}/accepted_hits.bam -o {output}.tmp &> {output}.log && mv {output}.tmp {output} && mv {output}.log {output}"

rule tuxedo_cufflinks_from_tophat2:
    params: cmd = tux_cfg['cufflinks']['cmd'],
            options = tux_cfg['cufflinks']['options']
    input: tophat2 = os.path.join("{prefix}.tophat2", "accepted_hits.bam")
    output: "{prefix}.cufflinks"
    shell: "{params.cmd} {params.options} {input.tophat2} -o {output}.tmp &> {output}.log && mv {output}.tmp {output} && mv {output}.log {output}"

# NB: usually {prefix}.bam is accepted_hits.bam from tophat
rule tuxedo_cufflinks_from_bam:
    params: cmd = tux_cfg['cufflinks']['cmd'],
            options = tux_cfg['cufflinks']['options']
    input: bam="{prefix}.bam"
    output: "{prefix}.cufflinks"
    shell: "{params.cmd} {params.options} {input.bam} -o {output}.tmp &> {output}.log && mv {output}.tmp {output} && mv {output}.log {output}"

ruleorder: tuxedo_cufflinks_from_tophat2 > tuxedo_cufflinks_from_bam
