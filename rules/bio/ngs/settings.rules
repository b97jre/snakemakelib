# -*- snakemake -*-
import os
from snakemakelib.config import update_sml_config, get_sml_config

# Add configuration variable to snakemake global config object
config['samples'] = config.get("samples", [])
config['regions'] = config.get("regions", []) 
config['runs'] = config.get("runs", [])

# Predefined settings for various platforms
# Docs needed:
#   run_id_re: regular expression for how to extract read group information from run id file names - this represents the *raw* prefix as delivered by some applications, e.g. Illumina
#   run_id_pfx_re: after alignment sometimes the run_id_pfx is modified, take into accont here
#   run_id_pfx_fmt: based on the results of run_id_re, make prefix formats as python mini-format strings for run_id
#   sample_pfx_ftm: ditto for sample
#   platform_unit_fn: ???
# Should all sample organization be relative to workdir?
sample_organization = {
    # All data in sample directory
    'sample' : {
        'run_id_re' : "(?P<SM>[A-Z0-9]+)",
        'run_id_pfx_re' : "(?P<SM>[A-Z0-9]+)",
        'run_id_pfx_fmt' : os.path.join("{SM}", "{SM}"),
        'sample_pfx_fmt' : os.path.join("{SM}", "{SM}"),
        'platform_unit_fn' : lambda x: {'PU':x[1]},
    },
    # Data in sample directory divided in subdirectory for each run, SRA-like
    'sample_run_sra' : {
        'run_id_re' : "(?P<SM>[A-Z0-9]+)_(?P<PU>[A-Z0-9]+)",
        'run_id_pfx_re' : "(?P<SM>[A-Z0-9]+)_(?P<PU>[A-Z0-9]+)",
        'run_id_pfx_fmt' : os.path.join("{SM}", "{PU}", "{SM}_{PU}"),
        'sample_pfx_fmt' : os.path.join("{SM}", "{SM}"),
        'platform_unit_fn' : lambda x: {'PU':x[1]},
    },
    # Data in sample directory divided in subdirectory for each run, more elaborate naming
    'sample_run' : {
        'run_id_re' : "(?:[0-9])_(?P<DT>[0-9]+)_(?P<PU>[A-Z0-9]+XX)_(?P<SM>P[0-9]+_[0-9]+)",
        'run_id_pfx_re' : "(?:[0-9])_(?P<PU>[0-9]+_[A-Z0-9]+XX)_(?P<SM>P[0-9]+_[0-9]+)",
        'run_id_pfx_fmt' : os.path.join("{SM}", "{PU}", "{PU}_{SM}"),
        'sample_pfx_fmt' : os.path.join("{SM}", "{SM}"),
    },
    # Illumina sequence data as delivered by SciLife
    'Illumina@SciLife' : {
        'run_id_re' : "(?P<PU1>[0-9])_(?P<DT>[0-9]+)_(?P<PU2>[A-Z0-9]+XX)_(?P<SM>P[0-9]+_[0-9]+)",
        'run_id_pfx_re' : "(?P<PU1>[0-9])_(?P<PU2>[0-9]+_[A-Z0-9]+XX)_(?P<SM>P[0-9]+_[0-9]+)",
        'run_id_pfx_fmt' : os.path.join("{SM}", "{PU2}", "{PU1}_{PU2}_{SM}"),
        'sample_pfx_fmt' : os.path.join("{SM}", "{SM}"),
    },
    'PacBio' : {
        'run_id_re' : "",
    },
    'SOLiD' : {
        'run_id_re' : "",
    },
}

config_default = { 
    'bio.ngs.settings' : {
        'aligner' : "bwa",
        'center' : "",
        'fastq_suffix' : ".fastq.gz",
        'inputdir' : ".",
        'sample_organization' : "sample",
        'read1_label' : "_1",
        'read2_label' : "_2",
        'read1_suffix' : ".fastq.gz",
        'read2_suffix' : ".fastq.gz",
        'regions' : config["regions"],
        'runs' : config["runs"],
        'samples' : config["samples"],
        'sampleinfo' : "", # generic; samplesheet could be Illuminas csv samplesheet; treat elsewhere?
        'sample_column_name' : "SM",
        'run_column_name' : "",
        'threads' : 8,
        'annotation' : {
            'annot_label' : "",
            'transcript_annot_gtf' : "",
        },
        'db' : {
            'dbsnp' : "",
            'ref' : "",
            'build' : '',
            'build_config' : None,
        },
        'java' : {
            'java_mem' : "6g",
            'java_tmpdir' : "/tmp",
        },
        'sequence_capture' : {
            'bait_regions' : "",
            'target_regions' : "",
        },
        'rnaseq' : {
            'quantification' : ['rsem'],
        },
    },
}

update_sml_config(config_default)

ngs_conf = get_sml_config('bio.ngs.settings')

update_sml_config({'bio.ngs.settings' : sample_organization[ngs_conf['sample_organization']]})

