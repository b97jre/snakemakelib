# -*- snakemake -*-
#
# NB: PeakSeq requires mappability files that are generated by code
# found here:
# http://archive.gersteinlab.org/proj/PeakSeq/Mappability_Map/Code/
# This program is configured in section mappability. Make sure the
# three binaries chr2hash, mergeOligoCounts, oligoFindPLFFile are in
# PATH.
import os
from snakemakelib.utils import safe_makedir
from snakemakelib.config import update_sml_config, get_sml_config
from snakemakelib.stat import is_installed
from snakemakelib.bio.ngs.db import index, chromosomes
# from snakemakelib.log import LoggerManager

# smllogger = LoggerManager().getLogger(__name__)

include: "../settings.rules"

ngs_cfg = get_sml_config('bio.ngs.settings')

config_default = {
    'bio.ngs.enrichment.peakseq' : {
        'index' : index,
        'ref' : ngs_cfg['db']['ref'],
        'mappability' : {
            'cmd' : 'compile.py',
        },
        'peakseq' :{
            'cmd' : 'PeakSeq',
        }
    },
}		

update_sml_config(config_default)

ps_cfg = get_sml_config('bio.ngs.enrichment.peakseq')
python2 = get_sml_config('comp.settings')['python2']['activate_cmd']
mapdir = os.path.join(os.path.dirname(ps_cfg['index', 'mappability']), str(ngs_cfg['read_length']))

rule peakseq_mappability_link:
    """Link reference to mappability directory"""
    input: ref = ps_cfg['ref']
    output: reflink = temp(ps_cfg['index', 'mappability'])
    run:
        safe_makedir(os.path.dirname(output.reflink))
        tgt = os.path.join(os.path.dirname(output.reflink), os.path.basename(input.ref))
        if not os.path.exists(tgt):
            os.symlink(input.ref, tgt)

# This is a hassle. See https://www.biostars.org/p/14092/
rule peakseq_mappability_chromosomes:
    """Generate chromosome-specific fasta files from the reference"""
    input: reflink = ps_cfg['index', 'mappability']
    output: [temp(os.path.join(mapdir, "{}.fa".format(x))) for x in chromosomes(ps_cfg['ref'])]
    run:
        from Bio import SeqIO
        seqs = SeqIO.parse(open(input.reflink), format='fasta')
        for seq in seqs:
            name = os.path.join(os.path.dirname(input.reflink), seq.id + '.fa')
            #smllogger.info("Generating chromosome file {}".format(name))
            print("Generating chromosome file {}".format(name))
            SeqIO.write(seq, open(name, 'w'), format='fasta')
            
rule peakseq_mappability:
    """Generate mappability files using Mappability_Map"""
    params: cmd = ps_cfg['mappability']['cmd'],
            read_length = str(ngs_cfg['read_length'])
    input: [os.path.join(mapdir, "{}.fa".format(x)) for x in chromosomes(ps_cfg['ref'])]
    output: "./tabort.txt"
    #output: [os.path.join(mapdir, "{}.fa.HashPosTable".format(x)) for x in _get_chromosomes()] + [os.path.join(mapdir, "{}.fa.HashOffsetTable".format(x)) for x in _get_chromosomes()]
    shell: python2 + " && cd $(dirname {input[0]}) && python {params.cmd} {params.read_length}"
