# -*- snakemake -*-
#
# NB: PeakSeq requires mappability files that are generated by code
# found here:
# http://archive.gersteinlab.org/proj/PeakSeq/Mappability_Map/Code/
# This program is configured in section mappability. Make sure the
# three binaries chr2hash, mergeOligoCounts, oligoFindPLFFile are in
# PATH.
import os
from snakemakelib.utils import safe_makedir
from snakemakelib.config import update_sml_config, get_sml_config
from snakemakelib.stat import is_installed
from snakemakelib.bio.ngs.db import index, chromosomes
from snakemakelib.log import LoggerManager

smllogger = LoggerManager().getLogger(__name__)

include: "../settings.rules"

ngs_cfg = get_sml_config('bio.ngs.settings')

config_default = {
    'bio.ngs.enrichment.peakseq' : {
        'index' : index,
        'ref' : ngs_cfg['db']['ref'],
        'mappability' : {
            #'cmd' : 'compile.py',
            'merlen' : str(ngs_cfg['read_length']),
            'chr2hash' : 'chr2hash',
            'oligoFindPLFFile' : 'oligoFindPLFFile',
            'mergeOligoCounts' : 'mergeOligoCounts',
        },
        'peakseq' :{
            'cmd' : 'PeakSeq',
        },
    },
}

update_sml_config(config_default)

ps_cfg = get_sml_config('bio.ngs.enrichment.peakseq')
python2 = get_sml_config('comp.settings')['python2']['activate_cmd']
mapdir = os.path.join(os.path.dirname(ps_cfg['index', 'mappability']), ps_cfg['mappability']['merlen'])

rule peakseq_mappability_link:
    """Link reference to mappability directory"""
    input: ref = ps_cfg['ref']
    output: reflink = temp(os.path.join(mapdir, os.path.basename(ps_cfg['index', 'mappability'])))
    run:
        safe_makedir(os.path.dirname(output.reflink))
        tgt = os.path.join(os.path.dirname(output.reflink), os.path.basename(input.ref))
        if not os.path.exists(tgt):
            os.symlink(input.ref, tgt)

# This is a hassle. See https://www.biostars.org/p/14092/
rule peakseq_mappability_write_chromosome:
    """Generate chromosome-specific fasta file from reference"""
    input: reflink = rules.peakseq_mappability_link.output.reflink
    output: temp("{prefix}.fa")
    run:
        from Bio import SeqIO
        seqs = SeqIO.parse(open(input.reflink), format='fasta')
        for seq in seqs:
            name = os.path.join(os.path.dirname(input.reflink), seq.id + '.fa')
            if seq.id == os.path.basename(wildcards.prefix):
                smllogger.info("Generating chromosome file {}".format(name))
                SeqIO.write(seq, open(name, 'w'), format='fasta')
                break

# The peakseq mappability command compile.py loops over all chromosomes, but
# the commands could be run independently. Parallelize here.
rule peakseq_mappability_chr2has:
    """Run chr2has"""
    params: cmd = ps_cfg['mappability']['chr2hash']
    input: fa="{prefix}.fa"
    output: HashOffsetTable=temp("{prefix}.fa.HashOffsetTable"), HashPosTable=temp("{prefix}.fa.HashPosTable")
    shell: "cd $(dirname {input.fa}) && {params.cmd} $(basename {input.fa})"

rule peakseq_mappability_find:
    """Run oligoFindPLFFile"""
    params: cmd = ps_cfg['mappability']['oligoFindPLFFile'],
            merlen = ps_cfg['mappability']['merlen']
    input: fa1="{prefix1}.fa.HashOffsetTable", fa2=os.path.join(mapdir, "{prefix2}.fa.HashOffsetTable")
    output: out=temp("{prefix1}__" + os.path.basename("{prefix2}") + ".plf_out")
    shell: "cd $(dirname {input.fa1}) && {params.cmd} $(basename {wildcards.prefix1}).fa $(basename {wildcards.prefix2}).fa {params.merlen} 0 0 1 1 > $(basename {output.out})"

rule peakseq_mappability_merge:
    """Run mergeOligoCounts"""
    params: cmd = ps_cfg['mappability']['mergeOligoCounts'],
            merlen = ps_cfg['mappability']['merlen']
    input: [os.path.join("{path}", ps_cfg['mappability']['merlen'], "{cref}__{{chr}}.plf_out".format(cref=x)) for x in chromosomes(ps_cfg['ref'])]
    output: bout = os.path.join("{path}", ps_cfg['mappability']['merlen'], "{chr}b.out")
    run:
        inputfiles = " ".join([os.path.basename(x) for x in input])
        path = os.path.dirname(output.bout)
        shell("cd {path} && {cmd} {inputfiles} > {bout}".format(path=path, bout=os.path.basename(output.bout), cmd=params.cmd, inputfiles=inputfiles))

rule peakseq_mappability:
    """Pseudo-rule: generate all mappability files by invoking the rules
    above
    """
    input: [os.path.join(mapdir, "{chr}b.out".format(chr=x)) for x in chromosomes(ps_cfg['ref'])]
