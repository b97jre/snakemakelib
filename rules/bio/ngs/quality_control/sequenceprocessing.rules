# -*- snakemake -*-
import os
from snakemakelib.utils import update_config, sml_rules_path

# Start by including the general snakefile
include: os.path.join(sml_rules_path(), 'bio/ngs', 'settings.rules')

BIO_NGS_QUALITYCONTROL_SEQUENCEPROCESSING = 'bio.ngs.quality_control.sequenceprocessing'
THREEPRIME = "threeprime"
FIVEPRIME = "fiveprime"
CUTADAPT = "cutadapt"
TRIMMOMATIC = "trimmomatic"
RESYNCMATES = "resyncmates"
PROCESSING_OPTIONS = "processing_options"

config_default = { 
    BIO_NGS_QUALITYCONTROL_SEQUENCEPROCESSING : {
        CUTADAPT : {
            CMD : "cutadapt",
            THREEPRIME: "AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC",
            FIVEPRIME : "AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATT",
            OPTIONS : "",
        },
        TRIMMOMATIC : {
            HOME : ".",
            OPTIONS : "-phred33",
            JAVA_MEM : config[BIO_NGS_SETTINGS][JAVA][JAVA_MEM],
            JAVA_TMPDIR : config[BIO_NGS_SETTINGS][JAVA][JAVA_TMPDIR],
            PROCESSING_OPTIONS : "LEADING:15 TRAILING:15 MINLEN:36",
        },
        RESYNCMATES : {
            HOME : ".",
            CMD : "resyncMates.pl",
            OPTIONS : "",
        },
    },
}

config = update_config(config, config_default)

config_default[BIO_NGS_QUALITYCONTROL_SEQUENCEPROCESSING][TRIMMOMATIC][JAR] = os.path.join(config[BIO_NGS_TOOLS_GATK][HOME], GATK_JAR_PROGRAM)

config = update_config(config, config_default)

config_default[BIO_NGS_QUALITYCONTROL_SEQUENCEPROCESSING][TRIMMOMATIC][CMD]  = "java -Xmx" + config[BIO_NGS_QUALITYCONTROL_SEQUENCEPROCESSING][TRIMMOMATIC][JAVA_MEM] + " -Djava.io.tmpdir=" + config[BIO_NGS_QUALITYCONTROL_SEQUENCEPROCESSING][TRIMMOMATIC][JAVA_TMPDIR] +  " -jar " + config[BIO_NGS_QUALITYCONTROL_SEQUENCEPROCESSING][TRIMMOMATIC][JAR]

config = update_config(config, config_default)

rule cutadapt_cut_threeprime:
    """Cutadapt: cut threeprime adaptor"""
    params: cmd = config[BIO_NGS_QUALITYCONTROL_SEQUENCEPROCESSING][CUTADAPT][CMD],
            options = config[BIO_NGS_QUALITYCONTROL_SEQUENCEPROCESSING][CUTADAPT][OPTIONS],
            threeprime = config[BIO_NGS_QUALITYCONTROL_SEQUENCEPROCESSING][CUTADAPT][THREEPRIME]
    input: "{prefix}" + config[BIO_NGS_SETTINGS][READ1_LABEL] + config[BIO_NGS_SETTINGS][FASTQ_SUFFIX]
    output: "{prefix}" + config[BIO_NGS_SETTINGS][READ1_LABEL] + ".trimmed" + config[BIO_NGS_SETTINGS][FASTQ_SUFFIX]
    shell: "{params.cmd} {params.options} -a {params.threeprime} {input} -o {output} > {wildcards.prefix}.cutadapt_metrics"

rule cutadapt_cut_fiveprime:
    """Cutadapt: cut fiveprime adaptor"""
    params: cmd = config[BIO_NGS_QUALITYCONTROL_SEQUENCEPROCESSING][CUTADAPT][CMD],
            options = config[BIO_NGS_QUALITYCONTROL_SEQUENCEPROCESSING][CUTADAPT][OPTIONS],
            fiveprime = config[BIO_NGS_QUALITYCONTROL_SEQUENCEPROCESSING][CUTADAPT][FIVEPRIME]
    input: "{prefix}" + config[BIO_NGS_SETTINGS][READ1_LABEL] + config[BIO_NGS_SETTINGS][FASTQ_SUFFIX]
    output: "{prefix}" + config[BIO_NGS_SETTINGS][READ1_LABEL] + ".trimmed" + config[BIO_NGS_SETTINGS][FASTQ_SUFFIX]
    shell: "{params.cmd} {params.options} -a {params.fiveprime} {input} -o {output} > {wildcards.prefix}.cutadapt_metrics"

# rule rule_3:
# 	input: " {prefix}$(READ1_LABEL).trimmed.fastq.gz {prefix}$(READ2_LABEL).trimmed.fastq.gz"
# 	output: "{prefix}$(READ1_LABEL).trimmed.sync.fastq.gz"
# 	shell: "$(RESYNCMATES) $(RESYNCMATES_OPTIONS) -i $< -j $*$(READ2_LABEL).trimmed.fastq.gz -o $@.tmp.gz -p $*$(READ2_LABEL).trimmed.sync.fastq.gz && mv $@.tmp.gz $@"

# rule rule_4:
# 	input: " {prefix}$(READ1_LABEL).trimmed.sync.fastq.gz"
# 	output: "{prefix}$(READ2_LABEL).trimmed.sync.fastq.gz"
# 	shell: "@echo $@ should be done in rule 1"

# rule rule_5:
# 	input: " {prefix}$(READ1_LABEL).fq.gz {prefix}$(READ2_LABEL).fq.gz"
# 	output: "{prefix}.trimmomatic.PE"
# 	shell: "$(TRIMMOMATIC_COMMAND) PE $(TRIMMOMATIC_OPTIONS) $^ $*$(READ1_LABEL).P.qtrim.fq.tmp.gz $*$(READ1_LABEL).U.qtrim.fq.tmp.gz $*$(READ2_LABEL).P.qtrim.fq.tmp.gz $*$(READ2_LABEL).U.qtrim.fq.tmp.gz $(TRIMMOMATIC_PROCESSING_OPTIONS) &> $@.tmp && mv $@.tmp $@ && mv $*$(READ1_LABEL).P.qtrim.fq.tmp.gz $*$(READ1_LABEL).P.qtrim.fq.gz && mv $*$(READ1_LABEL).U.qtrim.fq.tmp.gz $*$(READ1_LABEL).U.qtrim.fq.gz && mv $*$(READ2_LABEL).P.qtrim.fq.tmp.gz $*$(READ2_LABEL).P.qtrim.fq.gz && mv $*$(READ2_LABEL).U.qtrim.fq.tmp.gz $*$(READ2_LABEL).U.qtrim.fq.gz"

# rule rule_6:
# 	input: " {prefix}.trimmomatic.PE"
# 	output: "{prefix}$(READ1_LABEL).P.qtrim.fq.gz"
# 	shell: "echo Running rule $*.trimmomatic.PE to generate $@"

# rule rule_7:
# 	input: " {prefix}.trimmomatic.PE"
# 	output: "{prefix}$(READ1_LABEL).U.qtrim.fq.gz"
# 	shell: "echo Running rule $*.trimmomatic.PE to generate $@"

# rule rule_8:
# 	input: " {prefix}.trimmomatic.PE"
# 	output: "{prefix}$(READ2_LABEL).P.qtrim.fq.gz"
# 	shell: "echo Running rule $*.trimmomatic.PE to generate $@"

# rule rule_9:
# 	input: " {prefix}.trimmomatic.PE"
# 	output: "{prefix}$(READ2_LABEL).U.qtrim.fq.gz"
# 	shell: "echo Running rule $*.trimmomatic.PE to generate $@"
