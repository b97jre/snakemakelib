# -*- snakemake -*-
import os
from snakemakelib.utils import update_config, sml_rules_path, sml_path
import snakemakelib.variables as VAR

# Start by including the general snakefile
include: os.path.join(sml_rules_path(), 'bio/ngs', 'settings.rules')
# Include comp settings to gain access to awk and friends
include: os.path.join(sml_rules_path(), 'comp', 'settings.rules')

config_default = { 
    VAR.BIO_NGS_QUALITYCONTROL_PICARD : {
        # INSERTMETRICS_TARGETS : "$(subst .bam,.insert_metrics,$(wildcard $(INPUTDIR)/*/*recal.bam))",
        #ALIGNMETRICS_TARGETS : "$(subst .bam,.align_metrics,$(wildcard $(INPUTDIR)/*/*recal.bam))",
        #DUPMETRICS_TARGETS : "$(subst .bam,.dup_metrics,$(wildcard $(INPUTDIR)/*/*recal.bam))",
        #HSMETRICS_TARGETS : "$(subst .bam,.hs_metrics,$(wildcard $(INPUTDIR)/*/*recal.bam))",
        VAR.ADD_OR_REPLACE_READ_GROUPS_OPTIONS : "SORT_ORDER=coordinate CREATE_INDEX=true",
        VAR.ALIGNMETRICS_TARGETS : [],
        VAR.BAIT_REGIONS : config[VAR.BIO_NGS_SETTINGS][VAR.SEQUENCE_CAPTURE][VAR.BAIT_REGIONS],
        VAR.COMMON_OPTIONS : "VALIDATION_STRINGENCY=SILENT",
        VAR.DUPMETRICS_TARGETS : [],
        VAR.HOME : ".",
        VAR.HSMETRICS_TARGETS : [],
        VAR.INSERTMETRICS_TARGETS : [],
        VAR.JAVA_MEM : config[VAR.BIO_NGS_SETTINGS][VAR.JAVA][VAR.JAVA_MEM],
        VAR.JAVA_TMPDIR : config[VAR.BIO_NGS_SETTINGS][VAR.JAVA][VAR.JAVA_TMPDIR],
        VAR.MERGE_SAM_PREFIX : "merge",
        VAR.MERGE_SAM_OPTIONS : "CREATE_INDEX=true",
        VAR.MERGE_SAM_TARGETS : [],
        VAR.PLOTMETRICS : os.path.join(sml_path(), "scripts", "plotMetrics.R"),
        VAR.REF : config[VAR.BIO_NGS_SETTINGS][VAR.DB][VAR.REF],
        VAR.SORT_SAM_OPTIONS : "SORT_ORDER=coordinate",
        VAR.TARGET_REGIONS : config[VAR.BIO_NGS_SETTINGS][VAR.SEQUENCE_CAPTURE][VAR.TARGET_REGIONS],
    },
}


config = update_config(config, config_default)

config_default[VAR.BIO_NGS_QUALITYCONTROL_PICARD][VAR.OPTIONS] = config[VAR.BIO_NGS_QUALITYCONTROL_PICARD][VAR.COMMON_OPTIONS] 

config_default[VAR.BIO_NGS_QUALITYCONTROL_PICARD][VAR.CMD] = "java -Xmx" + config[VAR.BIO_NGS_QUALITYCONTROL_PICARD][VAR.JAVA_MEM] + " -Djava.io.tmpdir=" + config[VAR.BIO_NGS_QUALITYCONTROL_PICARD][VAR.JAVA_TMPDIR] + " -jar "

config = update_config(config, config_default)

# Use picard config to increase readibility
picard_config = config[VAR.BIO_NGS_QUALITYCONTROL_PICARD]

rule picard_build_bam_index:
    """Picard: build bam index from bam file"""
    params: cmd = picard_config[VAR.CMD] + os.path.join(picard_config[VAR.HOME], VAR.BUILD_BAM_INDEX),
            options = picard_config[VAR.OPTIONS]
    input: "{prefix}.bam"
    output: "{prefix}.bai"
    shell: "{params.cmd} I={input} O={output} {params.options}"


rule picard_sort_bam:
    """Picard: sort bam file"""
    params: cmd = picard_config[VAR.CMD] + os.path.join(picard_config[VAR.HOME], VAR.SORT_SAM),
            options = picard_config[VAR.OPTIONS],
            sortsam_options = picard_config[VAR.SORT_SAM_OPTIONS]
    input: "{prefix}.bam"
    output: "{prefix}.sort.bam"
    shell: "{params.cmd} I={input} O={output} {params.options} {params.sortsam_options}"

rule picard_reorder_bam:
    """Picard: reorder bam file"""
    params: cmd = picard_config[VAR.CMD] + os.path.join(picard_config[VAR.HOME], VAR.REORDER_SAM),
            options = picard_config[VAR.OPTIONS]
    input: "{prefix}.bam", picard_config[VAR.REF]
    output: "{prefix}.resorted.bam"
    shell: "{params.cmd} I={input[0]} R={input[1]} O={output} {params.options}"

rule picard_mark_duplicates:
    """Picard: mark duplicates"""
    params: cmd = picard_config[VAR.CMD] + os.path.join(picard_config[VAR.HOME], VAR.MARK_DUPLICATES),
            options = picard_config[VAR.OPTIONS]
    input: "{prefix}.bam"
    output: "{prefix}.dup.bam", "{prefix}.dup_metrics"
    shell: "{params.cmd} I={input} O={output[0]} {params.options} M={output[1]}"

# rule picard_create_sequence_dictionary:
#     params: cmd = picard_config[VAR.CMD] + os.path.join(picard_config[VAR.HOME], CREATE_SEQUENCE_DICTIONARY),
#             options = picard_config[VAR.OPTIONS]
#     input: picard_config[VAR.REF]
#     output: "{prefix}.interval_list"
#     shell: "{params.cmd} R={input} O={output}"

rule picard_create_interval_list_awk:
    """Picard: create interval list using awk"""
    params: cmd = picard_config[VAR.CMD] + os.path.join(picard_config[VAR.HOME], VAR.CREATE_SEQUENCE_DICTIONARY),
            options = picard_config[VAR.OPTIONS]
    input: "{prefix}.bed", picard_config[VAR.REF].replace(".fa", ".interval_list")
    output: "{prefix}.interval_list"
    shell: config[VAR.COMP_SETTINGS][VAR.AWK] + " '{{printf(\"%s\\t%s\\t%s\\t%s\\t%s\\n\", $$1,$$2,$$3,\"+\",$$4)}}' $< >> {output}"

rule picard_collect_insert_size_metrics:
    """Picard: collect insertion size metrics"""
    params: cmd = picard_config[VAR.CMD] + os.path.join(picard_config[VAR.HOME], VAR.COLLECT_INSERT_SIZE_METRICS),
            options = picard_config[VAR.OPTIONS]
    input: "{prefix}.bam", "{prefix}.bai"
    output: "{prefix}.insert_metrics"
    shell: "{params.cmd} {params.options} H={wildcards.prefix}.hist I={input[0]} O={output} R={input[1]}"

rule picard_mark_duplicates_metrics:
    """Picard: mark duplicates metrics. See also picard_mark_duplicates"""
    params: cmd = picard_config[VAR.CMD] + os.path.join(picard_config[VAR.HOME], VAR.MARK_DUPLICATES),
            options = picard_config[VAR.OPTIONS]
    input: "{prefix}.bam", "{prefix}.bai"
    output: "{prefix}.dup_metrics", "{prefix}.dup.bam"
    shell: "{params.cmd} {params.options} I={input[0]} M={output[0]} O={output[1]}"

rule picard_collect_alignment_summary_metrics:
    """Picard: collect alignment summary metrics"""
    params: cmd = picard_config[VAR.CMD] + os.path.join(picard_config[VAR.HOME], VAR.COLLECT_ALIGNMENT_SUMMARY_METRICS),
            options = picard_config[VAR.OPTIONS]
    input: "{prefix}.bam", "{prefix}.bai", picard_config[VAR.REF]
    output: "{prefix}.align_metrics"
    shell: "{params.cmd} {params.options} I={input} O={output[0]} R={input[2]}"

rule picard_calculate_hs_metrics:
    """Picard: calculate hybrid selection metrics"""
    params: cmd = picard_config[VAR.CMD] + os.path.join(picard_config[VAR.HOME], VAR.CALCULATE_HS_METRICS),
            options = picard_config[VAR.OPTIONS],
            target_regions = picard_config[VAR.TARGET_REGIONS],
            bait_regions = picard_config[VAR.BAIT_REGIONS]
    input: "{prefix}.bam", "{prefix}.bai", picard_config[VAR.REF]
    output: "{prefix}.hs_metrics"
    shell: "{params.cmd} {params.options} TI={params.target_regions} BI={params.bait_regions} I={input[0]} O={output} R={input[2]}"

rule picard_plot_metrics:
    """Picard: plot metrics using custom R script """
    params: cmd = picard_config[VAR.PLOTMETRICS]
    input: "{prefix}_metrics.txt"
    output: "{prefix}_metrics.pdf"
    shell: "{params.cmd} {input} {output} {wildcards.prefix}"

rule picard_add_or_replace_read_groups:
    """Picard: add or replace read groups. Currently tailored for Illumina read groups."""
    params: cmd = picard_config[VAR.CMD] + os.path.join(picard_config[VAR.HOME], VAR.ADD_OR_REPLACE_READ_GROUPS),
            options = picard_config[VAR.OPTIONS],
            custom_options = picard_config[VAR.ADD_OR_REPLACE_READ_GROUPS_OPTIONS],
            lib = "lib",
            rgpl = "Illumina",
            # rgpu = input.split(".")[0],
            # rgid = input.split(".")[0],
            # rgsm = input.split(".")[0]
            rgpu = "rgpu",
            rgid = "rgid",
            rgsm = "rgsm"
    input: "{prefix}.bam"
    output: "{prefix}.rg.bam"
    shell: "{params.cmd} INPUT={input} OUTPUT={output} {params.custom_options} RGID={params.rgid} RGLIB={params.lib} RGSM={params.rgsm} RGPL={params.rgpl} RGPU={params.rgpu}"

rule picard_merge_sam:
    """Picard: merge sam files"""
    params: cmd = picard_config[VAR.CMD] + os.path.join(picard_config[VAR.HOME], VAR.MERGE_SAM_FILES),
            options = " ".join([picard_config[VAR.OPTIONS],
            picard_config[VAR.MERGE_SAM_OPTIONS],
            picard_config[VAR.COMMON_OPTIONS]])
    input: ["INPUT={}".format(x) for x in picard_config[VAR.MERGE_SAM_TARGETS]]
    output: picard_config[VAR.MERGE_SAM_PREFIX] + ".merge.bam"
    shell: "{params.cmd} {input} O={output} {params.options}"
